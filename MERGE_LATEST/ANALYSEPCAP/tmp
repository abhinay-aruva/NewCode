--- /apps/opt/Abhinay/PCAPDumps/dumpFaster/TESTOFDUMPING/ANALYSEPCAP/GxInterface.cpp	2016-07-22 11:32:11.887407932 -0400
+++ GxInterface.cpp	2016-07-26 05:12:10.328601802 -0400
@@ -2,7 +2,7 @@
 #include <unordered_map>
 #include <string>
 
-GxInterface::GxInterface()
+GxInterface::GxInterface(std::string &nodepair)
 {
     memset(&GxStats,0,sizeof(CCGxStats));
     startTime = 0;
@@ -40,7 +40,6 @@
             break;
 
         case 0:
-
             /* Handle Response */
             TS = req[reqtype][pkt.hopIdentifier];
             if(TS == 0)
@@ -126,31 +125,32 @@
                 msgType = "TERMINATE";
                 break;
         }
-        std::cout << curTime << " Ip=" << node <<   " Ix=" << "Gx"                    << " "
+        std::cout << curTime << " " << node <<   " Ix=" << "Gx"                    << " "
                                                           << "Ty="      << msgType                 << " "
                                                           << "Kp=Att"  
                                                           << " Kpv=" << GxStats.attempts[i-1]     << std::endl;
 
-        std::cout << curTime << " Ip=" << node <<   " Ix=" << "Gx"                    << " "
+        std::cout << curTime << " " << node <<   " Ix=" << "Gx"                    << " "
                                                           << "Ty="      << msgType                 << " "
                                                           << "Kp=Suc"
                                                           << " Kpv="  << GxStats.succCount[i-1]     << " " << std::endl;
 
-       std::cout << curTime << " Ip=" << node <<   " Ix=" << "Gx"                    << " "
+       std::cout << curTime << " " << node <<   " Ix=" << "Gx"                    << " "
                                                           << "Ty="      << msgType                 << " "
                                                           << "Kp=Fail"
                                                           << " Kpv="      << GxStats.failCount[i-1]    << " " << std::endl;
-       std::cout << curTime << " Ip=" << node <<   " Ix=" << "Gx"                    << " "
+       std::cout << curTime << " " << node <<   " Ix=" << "Gx"                    << " "
                                                           << "Ty="      << msgType                 << " "
                                                           << "Kp=Tout"
                                                           << " Kpv="      << GxStats.timeoutCount[i-1]    << " " << std::endl;
 
+
        if(GxStats.latencySize[i-1] > 0)
        {
-           std::cout << curTime << " Ip=" << node <<   " Ix=" << "Gx"                    << " "
+           std::cout << curTime << " " << node <<   " Ix=" << "Gx"                    << " "
                                                               << "Ty="      << msgType                 << " "
                                                               << "Kp=Laty"
-                                                              << " Kpv=" <<  (int)((GxStats.latency[i-1]/GxStats.latencySize[i-1])*1000)<< std::endl; 
+                                                           << " Kpv=" <<  (int)((GxStats.latency[i-1]/GxStats.latencySize[i-1]) * 1000)<< std::endl;
        }
     }
 }
@@ -158,6 +158,4 @@
 void GxInterface::clearStats()
 {
     memset(&GxStats,0,sizeof(CCGxStats));
-    //req.clear();
-    //res.clear();
 }
